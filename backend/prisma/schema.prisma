// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// after making change, migrate 
// npx prisma migrate dev --name message

// docs for schema attributes
// https://www.prisma.io/docs/orm/reference/prisma-schema-reference

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  username         String          @unique
  discriminator    String          
  createdAt        DateTime        @default(now())
  subTier          String          @default("free")
  stripeCustomerId String?         @unique
  servers          ServerMember[]
  messages         Message[]
  directMessages   DirectMessage[]

  @@unique([username, discriminator])
}

model Server {
  id         String         @id @default(uuid())
  name       String
  icon       String?
  ownerId    String
  createdAt  DateTime       @default(now())
  channels   Channel[]
  members    ServerMember[]
  inviteCode String         @unique
}

model ServerMember {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  serverId String
  server   Server   @relation(fields: [serverId], references: [id])
  role     String   @default("member")
  nickname String?
  joinedAt DateTime @default(now())
}

model Channel {
  id        String    @id @default(uuid())
  name      String
  type      String
  serverId  String
  server    Server    @relation(fields: [serverId], references: [id])
  createdAt DateTime  @default(now())
  messages  Message[]
}

model Message {
  id          String   @id @default(uuid())
  content     String   @db.Text
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  channelId   String
  channel     Channel  @relation(fields: [channelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  edited      Boolean  @default(false)
  attachments String[]
}

model DirectMessage {
  id          String   @id @default(uuid())
  content     String   @db.Text
  senderId    String
  sender      User     @relation(fields: [senderId], references: [id])
  recipientId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  edited      Boolean  @default(false)
  read        Boolean  @default(false)
}
